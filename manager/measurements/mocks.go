// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ConsenSys/fc-latency-map/manager/measurements (interfaces: MeasurementService)

// Package measurements is a generated GoMock package.
package measurements

import (
	reflect "reflect"

	models "github.com/ConsenSys/fc-latency-map/manager/models"
	gomock "github.com/golang/mock/gomock"
	ripe_atlas "github.com/keltia/ripe-atlas"
)

// MockMeasurementService is a mock of MeasurementService interface.
type MockMeasurementService struct {
	ctrl     *gomock.Controller
	recorder *MockMeasurementServiceMockRecorder
}

// MockMeasurementServiceMockRecorder is the mock recorder for MockMeasurementService.
type MockMeasurementServiceMockRecorder struct {
	mock *MockMeasurementService
}

// NewMockMeasurementService creates a new mock instance.
func NewMockMeasurementService(ctrl *gomock.Controller) *MockMeasurementService {
	mock := &MockMeasurementService{ctrl: ctrl}
	mock.recorder = &MockMeasurementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeasurementService) EXPECT() *MockMeasurementServiceMockRecorder {
	return m.recorder
}

// GetMeasurements mocks base method.
func (m *MockMeasurementService) GetMeasurements() []*models.Measurement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasurements")
	ret0, _ := ret[0].([]*models.Measurement)
	return ret0
}

// GetMeasurements indicates an expected call of GetMeasurements.
func (mr *MockMeasurementServiceMockRecorder) GetMeasurements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasurements", reflect.TypeOf((*MockMeasurementService)(nil).GetMeasurements))
}

// GetMeasuresLastResultTime mocks base method.
func (m *MockMeasurementService) GetMeasuresLastResultTime() ([]*models.Measurement, map[int]int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeasuresLastResultTime")
	ret0, _ := ret[0].([]*models.Measurement)
	ret1, _ := ret[1].(map[int]int)
	return ret0, ret1
}

// GetMeasuresLastResultTime indicates an expected call of GetMeasuresLastResultTime.
func (mr *MockMeasurementServiceMockRecorder) GetMeasuresLastResultTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeasuresLastResultTime", reflect.TypeOf((*MockMeasurementService)(nil).GetMeasuresLastResultTime))
}

// GetMiners mocks base method.
func (m *MockMeasurementService) GetMiners() []*models.Miner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMiners")
	ret0, _ := ret[0].([]*models.Miner)
	return ret0
}

// GetMiners indicates an expected call of GetMiners.
func (mr *MockMeasurementServiceMockRecorder) GetMiners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMiners", reflect.TypeOf((*MockMeasurementService)(nil).GetMiners))
}

// GetProbIDs mocks base method.
func (m *MockMeasurementService) GetProbIDs(arg0 []Place, arg1, arg2 float64) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProbIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetProbIDs indicates an expected call of GetProbIDs.
func (mr *MockMeasurementServiceMockRecorder) GetProbIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProbIDs", reflect.TypeOf((*MockMeasurementService)(nil).GetProbIDs), arg0, arg1, arg2)
}

// ImportMeasurement mocks base method.
func (m *MockMeasurementService) ImportMeasurement(arg0 []ripe_atlas.MeasurementResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ImportMeasurement", arg0)
}

// ImportMeasurement indicates an expected call of ImportMeasurement.
func (mr *MockMeasurementServiceMockRecorder) ImportMeasurement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportMeasurement", reflect.TypeOf((*MockMeasurementService)(nil).ImportMeasurement), arg0)
}

// PlacesDataSet mocks base method.
func (m *MockMeasurementService) PlacesDataSet() ([]Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlacesDataSet")
	ret0, _ := ret[0].([]Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlacesDataSet indicates an expected call of PlacesDataSet.
func (mr *MockMeasurementServiceMockRecorder) PlacesDataSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlacesDataSet", reflect.TypeOf((*MockMeasurementService)(nil).PlacesDataSet))
}

// UpsertMeasurements mocks base method.
func (m *MockMeasurementService) UpsertMeasurements(arg0 []*ripe_atlas.Measurement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpsertMeasurements", arg0)
}

// UpsertMeasurements indicates an expected call of UpsertMeasurements.
func (mr *MockMeasurementServiceMockRecorder) UpsertMeasurements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMeasurements", reflect.TypeOf((*MockMeasurementService)(nil).UpsertMeasurements), arg0)
}
