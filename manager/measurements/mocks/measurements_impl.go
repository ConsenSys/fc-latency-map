// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ConsenSys/fc-latency-map/manager/measurements (interfaces: MeasurementService)

// Package measurements is a generated GoMock package.
package measurements

import (
	reflect "reflect"

	models "github.com/ConsenSys/fc-latency-map/manager/models"
	gomock "github.com/golang/mock/gomock"
	atlas "github.com/keltia/ripe-atlas"
)

// MockMeasurementService is a mock of MeasurementService interface.
type MockMeasurementService struct {
	ctrl     *gomock.Controller
	recorder *MockMeasurementServiceMockRecorder
}

// MockMeasurementServiceMockRecorder is the mock recorder for MockMeasurementService.
type MockMeasurementServiceMockRecorder struct {
	mock *MockMeasurementService
}

// NewMockMeasurementService creates a new mock instance.
func NewMockMeasurementService(ctrl *gomock.Controller) *MockMeasurementService {
	mock := &MockMeasurementService{ctrl: ctrl}
	mock.recorder = &MockMeasurementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeasurementService) EXPECT() *MockMeasurementServiceMockRecorder {
	return m.recorder
}

// createMeasurements mocks base method.
func (m *MockMeasurementService) createMeasurements(arg0 []*atlas.Measurement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "createMeasurements", arg0)
}

// createMeasurements indicates an expected call of createMeasurements.
func (mr *MockMeasurementServiceMockRecorder) createMeasurements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createMeasurements", reflect.TypeOf((*MockMeasurementService)(nil).createMeasurements), arg0)
}

// getMeasuresLastResultTime mocks base method.
func (m *MockMeasurementService) getMeasuresLastResultTime() map[int]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getMeasuresLastResultTime")
	ret0, _ := ret[0].(map[int]int)
	return ret0
}

// getMeasuresLastResultTime indicates an expected call of getMeasuresLastResultTime.
func (mr *MockMeasurementServiceMockRecorder) getMeasuresLastResultTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getMeasuresLastResultTime", reflect.TypeOf((*MockMeasurementService)(nil).getMeasuresLastResultTime))
}

// getMiners mocks base method.
func (m *MockMeasurementService) getMiners() []*models.Miner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getMiners")
	ret0, _ := ret[0].([]*models.Miner)
	return ret0
}

// getMiners indicates an expected call of getMiners.
func (mr *MockMeasurementServiceMockRecorder) getMiners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getMiners", reflect.TypeOf((*MockMeasurementService)(nil).getMiners))
}

// getProbIDs mocks base method.
func (m *MockMeasurementService) getProbIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getProbIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// getProbIDs indicates an expected call of getProbIDs.
func (mr *MockMeasurementServiceMockRecorder) getProbIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getProbIDs", reflect.TypeOf((*MockMeasurementService)(nil).getProbIDs))
}

// importMeasurement mocks base method.
func (m *MockMeasurementService) importMeasurement(arg0 []atlas.MeasurementResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "importMeasurement", arg0)
}

// importMeasurement indicates an expected call of importMeasurement.
func (mr *MockMeasurementServiceMockRecorder) importMeasurement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "importMeasurement", reflect.TypeOf((*MockMeasurementService)(nil).importMeasurement), arg0)
}
