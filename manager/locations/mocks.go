// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ConsenSys/fc-latency-map/manager/locations (interfaces: LocationService)

// Package locations is a generated GoMock package.
package locations

import (
	reflect "reflect"

	models "github.com/ConsenSys/fc-latency-map/manager/models"
	gomock "github.com/golang/mock/gomock"
)

// MockLocationService is a mock of LocationService interface.
type MockLocationService struct {
	ctrl     *gomock.Controller
	recorder *MockLocationServiceMockRecorder
}

// MockLocationServiceMockRecorder is the mock recorder for MockLocationService.
type MockLocationServiceMockRecorder struct {
	mock *MockLocationService
}

// NewMockLocationService creates a new mock instance.
func NewMockLocationService(ctrl *gomock.Controller) *MockLocationService {
	mock := &MockLocationService{ctrl: ctrl}
	mock.recorder = &MockLocationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationService) EXPECT() *MockLocationServiceMockRecorder {
	return m.recorder
}

// AddLocation mocks base method.
func (m *MockLocationService) AddLocation(arg0 *models.Location) *models.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocation", arg0)
	ret0, _ := ret[0].(*models.Location)
	return ret0
}

// AddLocation indicates an expected call of AddLocation.
func (mr *MockLocationServiceMockRecorder) AddLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocation", reflect.TypeOf((*MockLocationService)(nil).AddLocation), arg0)
}

// CheckCountry mocks base method.
func (m *MockLocationService) CheckCountry(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCountry", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckCountry indicates an expected call of CheckCountry.
func (mr *MockLocationServiceMockRecorder) CheckCountry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCountry", reflect.TypeOf((*MockLocationService)(nil).CheckCountry), arg0)
}

// DeleteLocation mocks base method.
func (m *MockLocationService) DeleteLocation(arg0 *models.Location) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocation", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteLocation indicates an expected call of DeleteLocation.
func (mr *MockLocationServiceMockRecorder) DeleteLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocation", reflect.TypeOf((*MockLocationService)(nil).DeleteLocation), arg0)
}

// GetAllLocations mocks base method.
func (m *MockLocationService) GetAllLocations() []*models.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLocations")
	ret0, _ := ret[0].([]*models.Location)
	return ret0
}

// GetAllLocations indicates an expected call of GetAllLocations.
func (mr *MockLocationServiceMockRecorder) GetAllLocations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLocations", reflect.TypeOf((*MockLocationService)(nil).GetAllLocations))
}

// FindAirport mocks base method.
func (m *MockLocationService) FindAirport(arg0 string) (Airport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAirport", arg0)
	ret0, _ := ret[0].(Airport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAirport indicates an expected call of FindAirport.
func (mr *MockLocationServiceMockRecorder) FindAirport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAirport", reflect.TypeOf((*MockLocationService)(nil).FindAirport), arg0)
}

// GetLocation mocks base method.
func (m *MockLocationService) GetLocation(arg0 *models.Location) *models.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", arg0)
	ret0, _ := ret[0].(*models.Location)
	return ret0
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockLocationServiceMockRecorder) GetLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockLocationService)(nil).GetLocation), arg0)
}
